{
  "version": 3,
  "sources": ["../../../src/assets/js/nav.js"],
  "sourcesContent": ["// Set the navigation link highlight on the current active page\nfunction setActiveNavLink() {\n  // Get the current path\n  const currentPath = window.location.pathname;\n\n  // Remove trailing slash for consistency\n  const normalizedPath = currentPath.endsWith(\"/\")\n    ? currentPath.slice(0, -1)\n    : currentPath;\n\n  // Remove .cs-active class from all navigation links\n  const navLinks = document.querySelectorAll(\".cs-li-link\");\n  navLinks.forEach((link) => {\n    // Remove active class\n    link.classList.remove(\"cs-active\");\n\n    // Get and normalize the link href\n    const linkPath = link.getAttribute(\"href\");\n    const normalizedLinkPath = linkPath.endsWith(\"/\")\n      ? linkPath.slice(0, -1)\n      : linkPath;\n\n    // Check if this link matches the current path\n    if (\n      // Check for exact match\n      normalizedPath === normalizedLinkPath ||\n      // Special case for home page\n      (normalizedPath === \"\" && normalizedLinkPath === \"\") ||\n      // Handle root path\n      (normalizedPath === \"\" && normalizedLinkPath === \"/\")\n    ) {\n      link.classList.add(\"cs-active\");\n    }\n  });\n}\n\n// Call the underline nav item function when the page loads\ndocument.addEventListener(\"DOMContentLoaded\", setActiveNavLink);\n\n// Also call it when the URL changes without a page reload (if using client-side routing)\nwindow.addEventListener(\"popstate\", setActiveNavLink);\n\n// Select DOM elements\nconst bodyElement = document.querySelector(\"body\");\nconst navbarMenu = document.querySelector(\"#cs-navigation\");\nconst hamburgerMenu = document.querySelector(\"#cs-navigation .cs-toggle\");\n\n// Function to toggle the aria-expanded attribute\nfunction toggleAriaExpanded(element) {\n  const isExpanded = element.getAttribute(\"aria-expanded\");\n  element.setAttribute(\n    \"aria-expanded\",\n    isExpanded === \"false\" ? \"true\" : \"false\"\n  );\n}\n\n// Function to toggle the menu open or closed\nfunction toggleMenu() {\n  hamburgerMenu.classList.toggle(\"cs-active\");\n  navbarMenu.classList.toggle(\"cs-active\");\n  bodyElement.classList.toggle(\"cs-open\");\n  toggleAriaExpanded(hamburgerMenu);\n}\n\n// Add click event listener to the hamburger menu\nhamburgerMenu.addEventListener(\"click\", toggleMenu);\n\n// Add click event listener to the navbar menu to handle clicks on the pseudo-element\nnavbarMenu.addEventListener(\"click\", function (event) {\n  if (\n    event.target === navbarMenu &&\n    navbarMenu.classList.contains(\"cs-active\")\n  ) {\n    toggleMenu();\n  }\n});\n\n// Function to handle dropdown toggle\nfunction toggleDropdown(element) {\n  element.classList.toggle(\"cs-active\");\n  const dropdownButton = element.querySelector(\".cs-dropdown-button\");\n  if (dropdownButton) {\n    toggleAriaExpanded(dropdownButton);\n  }\n}\n\n// Add event listeners to each dropdown element for accessibility\nconst dropdownElements = document.querySelectorAll(\".cs-dropdown\");\ndropdownElements.forEach((element) => {\n  let escapePressed = false;\n\n  element.addEventListener(\"focusout\", function (event) {\n    // Skip the focusout logic if escape was pressed\n    if (escapePressed) {\n      escapePressed = false;\n      return;\n    }\n\n    // If the focus has moved outside the dropdown, remove the active class from the dropdown\n    if (!element.contains(event.relatedTarget)) {\n      element.classList.remove(\"cs-active\");\n      const dropdownButton = element.querySelector(\".cs-dropdown-button\");\n\n      if (dropdownButton) {\n        toggleAriaExpanded(dropdownButton);\n      }\n    }\n  });\n\n  element.addEventListener(\"keydown\", function (event) {\n    if (element.classList.contains(\"cs-active\")) {\n      event.stopPropagation();\n    }\n\n    // Pressing Enter or Space will toggle the dropdown and adjust the aria-expanded attribute\n    if (event.key === \"Enter\" || event.key === \" \") {\n      event.preventDefault();\n      toggleDropdown(element);\n    }\n\n    // Pressing Escape will remove the active class from the dropdown. The stopPropagation above will stop the hamburger menu from closing\n    if (event.key === \"Escape\") {\n      escapePressed = true;\n      toggleDropdown(element);\n    }\n  });\n\n  // Handles dropdown menus on mobile - the matching media query (max-width: 63.9375rem) is necessary so that clicking the dropdown button on desktop does not add the active class and thus interfere with the hover state\n  const maxWidthMediaQuery = window.matchMedia(\"(max-width: 63.9375rem)\");\n  if (maxWidthMediaQuery.matches) {\n    element.addEventListener(\"click\", () => toggleDropdown(element));\n  }\n});\n\n// Pressing Enter will redirect to the href\nconst dropdownLinks = document.querySelectorAll(\".cs-drop-li > .cs-li-link\");\ndropdownLinks.forEach((link) => {\n  link.addEventListener(\"keydown\", function (event) {\n    if (event.key === \"Enter\") {\n      window.location.href = this.href;\n    }\n  });\n});\n\n// If you press Escape and the hamburger menu is open, close it\ndocument.addEventListener(\"keydown\", (event) => {\n  if (event.key === \"Escape\" && hamburgerMenu.classList.contains(\"cs-active\")) {\n    toggleMenu();\n  }\n});\n"],
  "mappings": ";;AACA,WAAS,mBAAmB;AAE1B,UAAM,cAAc,OAAO,SAAS;AAGpC,UAAM,iBAAiB,YAAY,SAAS,GAAG,IAC3C,YAAY,MAAM,GAAG,EAAE,IACvB;AAGJ,UAAM,WAAW,SAAS,iBAAiB,aAAa;AACxD,aAAS,QAAQ,CAAC,SAAS;AAEzB,WAAK,UAAU,OAAO,WAAW;AAGjC,YAAM,WAAW,KAAK,aAAa,MAAM;AACzC,YAAM,qBAAqB,SAAS,SAAS,GAAG,IAC5C,SAAS,MAAM,GAAG,EAAE,IACpB;AAGJ;AAAA;AAAA,QAEE,mBAAmB;AAAA,QAElB,mBAAmB,MAAM,uBAAuB;AAAA,QAEhD,mBAAmB,MAAM,uBAAuB;AAAA,QACjD;AACA,aAAK,UAAU,IAAI,WAAW;AAAA,MAChC;AAAA,IACF,CAAC;AAAA,EACH;AAGA,WAAS,iBAAiB,oBAAoB,gBAAgB;AAG9D,SAAO,iBAAiB,YAAY,gBAAgB;AAGpD,MAAM,cAAc,SAAS,cAAc,MAAM;AACjD,MAAM,aAAa,SAAS,cAAc,gBAAgB;AAC1D,MAAM,gBAAgB,SAAS,cAAc,2BAA2B;AAGxE,WAAS,mBAAmB,SAAS;AACnC,UAAM,aAAa,QAAQ,aAAa,eAAe;AACvD,YAAQ;AAAA,MACN;AAAA,MACA,eAAe,UAAU,SAAS;AAAA,IACpC;AAAA,EACF;AAGA,WAAS,aAAa;AACpB,kBAAc,UAAU,OAAO,WAAW;AAC1C,eAAW,UAAU,OAAO,WAAW;AACvC,gBAAY,UAAU,OAAO,SAAS;AACtC,uBAAmB,aAAa;AAAA,EAClC;AAGA,gBAAc,iBAAiB,SAAS,UAAU;AAGlD,aAAW,iBAAiB,SAAS,SAAU,OAAO;AACpD,QACE,MAAM,WAAW,cACjB,WAAW,UAAU,SAAS,WAAW,GACzC;AACA,iBAAW;AAAA,IACb;AAAA,EACF,CAAC;AAGD,WAAS,eAAe,SAAS;AAC/B,YAAQ,UAAU,OAAO,WAAW;AACpC,UAAM,iBAAiB,QAAQ,cAAc,qBAAqB;AAClE,QAAI,gBAAgB;AAClB,yBAAmB,cAAc;AAAA,IACnC;AAAA,EACF;AAGA,MAAM,mBAAmB,SAAS,iBAAiB,cAAc;AACjE,mBAAiB,QAAQ,CAAC,YAAY;AACpC,QAAI,gBAAgB;AAEpB,YAAQ,iBAAiB,YAAY,SAAU,OAAO;AAEpD,UAAI,eAAe;AACjB,wBAAgB;AAChB;AAAA,MACF;AAGA,UAAI,CAAC,QAAQ,SAAS,MAAM,aAAa,GAAG;AAC1C,gBAAQ,UAAU,OAAO,WAAW;AACpC,cAAM,iBAAiB,QAAQ,cAAc,qBAAqB;AAElE,YAAI,gBAAgB;AAClB,6BAAmB,cAAc;AAAA,QACnC;AAAA,MACF;AAAA,IACF,CAAC;AAED,YAAQ,iBAAiB,WAAW,SAAU,OAAO;AACnD,UAAI,QAAQ,UAAU,SAAS,WAAW,GAAG;AAC3C,cAAM,gBAAgB;AAAA,MACxB;AAGA,UAAI,MAAM,QAAQ,WAAW,MAAM,QAAQ,KAAK;AAC9C,cAAM,eAAe;AACrB,uBAAe,OAAO;AAAA,MACxB;AAGA,UAAI,MAAM,QAAQ,UAAU;AAC1B,wBAAgB;AAChB,uBAAe,OAAO;AAAA,MACxB;AAAA,IACF,CAAC;AAGD,UAAM,qBAAqB,OAAO,WAAW,yBAAyB;AACtE,QAAI,mBAAmB,SAAS;AAC9B,cAAQ,iBAAiB,SAAS,MAAM,eAAe,OAAO,CAAC;AAAA,IACjE;AAAA,EACF,CAAC;AAGD,MAAM,gBAAgB,SAAS,iBAAiB,2BAA2B;AAC3E,gBAAc,QAAQ,CAAC,SAAS;AAC9B,SAAK,iBAAiB,WAAW,SAAU,OAAO;AAChD,UAAI,MAAM,QAAQ,SAAS;AACzB,eAAO,SAAS,OAAO,KAAK;AAAA,MAC9B;AAAA,IACF,CAAC;AAAA,EACH,CAAC;AAGD,WAAS,iBAAiB,WAAW,CAAC,UAAU;AAC9C,QAAI,MAAM,QAAQ,YAAY,cAAc,UAAU,SAAS,WAAW,GAAG;AAC3E,iBAAW;AAAA,IACb;AAAA,EACF,CAAC;",
  "names": []
}
